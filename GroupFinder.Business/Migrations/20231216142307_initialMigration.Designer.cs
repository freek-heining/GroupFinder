// <auto-generated />
using System;
using GroupFinder.Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GroupFinder.Business.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231216142307_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupFinder.Domain.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("GameSystem")
                        .HasColumnType("int");

                    b.Property<string>("GuestPlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GuestPlayerRaceId")
                        .HasColumnType("int");

                    b.Property<string>("HostPlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HostPlayerRaceId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Played")
                        .HasColumnType("bit");

                    b.Property<bool>("ReminderSet")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.HasIndex("GuestPlayerId");

                    b.HasIndex("GuestPlayerRaceId");

                    b.HasIndex("HostPlayerId");

                    b.HasIndex("HostPlayerRaceId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Date = new DateTime(2022, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            GameSystem = 0,
                            GuestPlayerId = "E18EAFB9-4E82-40FA-A62D-97B830F3CCC5",
                            GuestPlayerRaceId = 2,
                            HostPlayerId = "4C0988AC-D95B-40B0-A229-668D7CD9F89C",
                            HostPlayerRaceId = 1,
                            Location = "DCA Amersfoort",
                            Played = false,
                            ReminderSet = true,
                            Title = "Freek vs Jasper"
                        },
                        new
                        {
                            GameId = 2,
                            Date = new DateTime(2022, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            GameSystem = 1,
                            GuestPlayerId = "54C2F7AF-0786-48F0-874F-A9139732DA26",
                            GuestPlayerRaceId = 4,
                            HostPlayerId = "AC135233-FAC7-4B96-BE3A-B5EC8E4B1D52",
                            HostPlayerRaceId = 3,
                            Location = "Thuis bij Erwin",
                            Played = false,
                            ReminderSet = true,
                            Title = "Erwin vs Christian"
                        });
                });

            modelBuilder.Entity("GroupFinder.Domain.Entities.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            Name = "Necrons"
                        },
                        new
                        {
                            RaceId = 2,
                            Name = "Orks"
                        },
                        new
                        {
                            RaceId = 3,
                            Name = "Thousand Sons"
                        },
                        new
                        {
                            RaceId = 4,
                            Name = "Space Marines"
                        });
                });

            modelBuilder.Entity("GroupFinder.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4C0988AC-D95B-40B0-A229-668D7CD9F89C",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3794fc9a-5c66-48f4-af93-73bde4505475",
                            Email = "freek.heining@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Freek",
                            HomeTown = "Amersfoort",
                            LastName = "Heining",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEOeMds5es5uEOdTvMro9IzS/fhkU0Vit9NadDcR3WJTU0csTe4MxJTRrmP6PlGg0A==",
                            PhoneNumber = "0031644078941",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d83845e4-d747-4661-931e-e16fce0ae2aa",
                            TwoFactorEnabled = false,
                            UserName = "freek.heining@gmail.com"
                        },
                        new
                        {
                            Id = "E18EAFB9-4E82-40FA-A62D-97B830F3CCC5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2df26c44-6e7d-4c90-96d9-90573f70abd2",
                            Email = "jasper.visser@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jasper",
                            HomeTown = "Utrecht",
                            LastName = "Visser",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOf2Y3HyczWC3ASxaz/dYwdDSZSFR8ZKajg2zWs1nEi6riVMZKFq/h8KPyE2Xbhq3w==",
                            PhoneNumber = "0031644123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0ce2ea-72da-46a2-b67c-1df950007d2e",
                            TwoFactorEnabled = false,
                            UserName = "jasper.visser@gmail.com"
                        },
                        new
                        {
                            Id = "AC135233-FAC7-4B96-BE3A-B5EC8E4B1D52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95963422-192a-4fad-bf16-0a359df90d17",
                            Email = "erwin.bos@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Erwin",
                            HomeTown = "Amsterdam",
                            LastName = "Bos",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELy8Yvqn1WIxHikUkCt7iVh7Wed0bv9ccEByDVK38Pq/Z0Ulhl33f8JyyxQ9DQIoxQ==",
                            PhoneNumber = "0031644123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16e2c646-2321-4b9d-8ad4-0f497b782330",
                            TwoFactorEnabled = false,
                            UserName = "erwin.bos@gmail.com"
                        },
                        new
                        {
                            Id = "54C2F7AF-0786-48F0-874F-A9139732DA26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d944434-0957-4134-9291-fce794fd963b",
                            Email = "christian.koelewijn@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Christiaan",
                            HomeTown = "Almere",
                            LastName = "Koelewijn",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAHTOvq7UZEnLHNpZ/+ee/caNyInr/HPeY3wtQZdgp8V/U0gXJ9OyOf5YslWxo9PRw==",
                            PhoneNumber = "0031644123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df4f9d9a-b728-4ec0-a1fb-a27013961e69",
                            TwoFactorEnabled = false,
                            UserName = "christian.koelewijn@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GroupFinder.Domain.Entities.Game", b =>
                {
                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", "GuestPlayer")
                        .WithMany()
                        .HasForeignKey("GuestPlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupFinder.Domain.Entities.Race", "GuestPlayerRace")
                        .WithMany()
                        .HasForeignKey("GuestPlayerRaceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", "HostPlayer")
                        .WithMany()
                        .HasForeignKey("HostPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GroupFinder.Domain.Entities.Race", "HostPlayerRace")
                        .WithMany()
                        .HasForeignKey("HostPlayerRaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuestPlayer");

                    b.Navigation("GuestPlayerRace");

                    b.Navigation("HostPlayer");

                    b.Navigation("HostPlayerRace");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GroupFinder.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
